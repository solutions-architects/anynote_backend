[tool.poetry]
package-mode = false
name = "django-boilerplate"
version = "0.1.0"
description = "Django boiler plate for varios projects"
authors = ["egorgurtyakin@gmail.com"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"

# -------------------------------------------------
# DJANGO framework
# -------------------------------------------------
# Use packages from https://djangopackages.org/ !!! Do not reinvent the wheel!
# -------------------------------------------------
# https://www.djangoproject.com/
django = "^5.1.1"
# Filter querysets dynamically
# https://django-filter.readthedocs.io/en/stable/
django-filter = "^24.3"
# Easy multy-file settings managment
# https://pypi.org/project/django-split-settings/
django-split-settings = "^1.3.2"
# This project checks for various conditions and provides reports when anomalous behavior is detected.
# https://github.com/KristianOellegaard/django-health-check
django-health-check = "^3.18.3"
# AWS S3 cloud storage
# https://django-storages.readthedocs.io/en/1.14.4/backends/amazon-S3.html
django-storages = { extras = ["s3"], version = "^1.14.4" }
# Database abstraction layer
# https://pypi.org/project/psycopg-binary/
psycopg = {extras = ["binary"], version = "^3.2.1"}
# Redis cache backend for Django
# https://github.com/jazzband/django-redis
django-redis  = "^5.4.0"

# -------------------------------------------------
# DJANGO REST FRAMEWORK
# -------------------------------------------------
# https://www.django-rest-framework.org/
djangorestframework = "^3.15.2"
# Secure token-based auth for drf
# https://jazzband.github.io/django-rest-knox/,
django-rest-knox = "^5.0.1"


# -------------------------------------------------
#  Celery
# -------------------------------------------------
# Celery
# https://docs.celeryproject.org/en/stable/
celery = {extras = ["redis"], version = "^5.4.0"}
# Celery monitoring tool
# https://flower.readthedocs.io/en/latest/
flower = "^2.0.1"
# Periodic tasks
# https://github.com/celery/django-celery-beat
django-celery-beat = "^2.7.0"


# -------------------------------------------------
#  Other
# -------------------------------------------------
# Rich is a Python library for writing rich text (with color and style) to the terminal,
# and for displaying advanced content such as tables, markdown, and syntax highlighted code.
# https://rich.readthedocs.io/en/stable/introduction.html
rich = "^13.8.0"
# A full-featured YAML processing framework for Python
# https://github.com/yaml/pyyaml
pyyaml = "^6.0.2"

[tool.poetry.group.dev.dependencies]
ruff = "^0.6.4"
# Exports functions to access the IPython debugger, which features tab completion, syntax highlighting, better tracebacks
# https://github.com/gotcha/ipdb
ipdb = "^0.13.13"
# Provides a rich toolkit to help you make the most of using Python interactively
# https://ipython.readthedocs.io/en/stable/
ipython = "^8.27.0"
django-debug-toolbar = "^4.4.6"


[tool.poetry.group.local.dependencies]
# Rich is a Python library for writing rich text (with color and style) to the terminal,
# and for displaying advanced content such as tables, markdown, and syntax highlighted code.
# https://rich.readthedocs.io/en/stable/introduction.html
pre-commit = "^3.8.0"
# Invoke is a Python (2.7 and 3.4+) task execution tool & library,
# drawing inspiration from various sources to arrive at a powerful & clean feature set.
# http://www.pyinvoke.org/
invoke = "^2.2.0"
# For project managing and make-sync with boilerplate
# Github action `sync_django_boilerplate` using `cruft` to check against django boilerplate and send a PR,
# but not all changes will be applied automatically because of conflicts.
# In this case, we need to switch to this PR branch and use cruft to sync with boilerplate manually
# https://cruft.github.io/cruft/
cruft = "^2.15.0"


[tool.poetry.group.test.dependencies]
# Makes it easy to write small tests, yet scales to support complex functional testing
# https://github.com/pytest-dev/pytest/
pytest = "^8.3.2"
# Provides useful tools for testing Django apps
# Docs https://pytest-django.readthedocs.io/en/latest/
pytest-django = "^4.9.0"
# To run test in parallel
# Docs: https://pypi.org/project/pytest-xdist/
pytest-xdist = "^3.6.1"
# Prettier tests output
pytest-sugar = "^1.0.0"
# Easy and fast django models for testing
model-bakery = "^1.19.5"


[tool.pytest.ini_options]
# --reuse-db:
#   allow saving DB tables between test sessions (like --keepdb)
# --capture=no
#   allow use of ipdb during tests
# --ff
#   run last failed tests first
addopts = [
    "--reuse-db",
    "--ff",
    "--capture=no",
]
# skip all files inside following dirs
norecursedirs = [
]
# set Django settings
django_find_project = false
DJANGO_SETTINGS_MODULE = "src.config.settings"
# set Python path for pytest to register all packages within the project
pythonpath = "." # without this, pytest cannot find the src module

python_files = "test_*.py"
testpaths = ["src"]
#filterwarnings = "ignore::DeprecationWarning:^(?!node\\.).*:" if deprecation warns are annoying







[tool.poetry.group.commit-style.dependencies]
gitlint = "^0.19.1"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
line-length = 119
indent-width = 4
target-version = "py312"

[tool.ruff.lint]
extend-select = [
    # https://docs.astral.sh/ruff/rules/#pep8-naming-n
    # "N",
    # https://docs.astral.sh/ruff/rules/#isort-i
    "I",
    # https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "N",
]
ignore = [
    # https://docs.astral.sh/ruff/rules/missing-type-self
    "ANN101",
]
[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    # https://docs.astral.sh/ruff/rules/unused-import
    "F401",
    # https://docs.astral.sh/ruff/rules/undefined-local-with-import-star/
    "F403",
]
"conftest.py" = [
    # https://docs.astral.sh/ruff/rules/undefined-local-with-import-star/
    "F403",
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
parametrize-names-type = "list"
parametrize-values-type = "list"
parametrize-values-row-type = "list"

[tool.ruff.lint.isort]
force-wrap-aliases = true
split-on-trailing-comma = true
section-order = [
    "future",
    "standard-library",
    "django",
    "drf",
    "third-party",
    "first-party",
    "apps",
    "local-folder",
]
[tool.ruff.lint.isort.sections]
django = ["django"]
drf = ["rest_framework"]
apps = ["apps", "config", "libs"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
exclude = [
    # Disabling for admin since it's just configs and black/ruff format one item
    # tuples as one line
    "**/admin.py",
    "**/views.py",
    "**/admin/*",
    "**/views/*",
]
